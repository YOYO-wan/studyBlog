(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{376:function(t,r,a){"use strict";a.r(r);var s=a(4),e=Object(s.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"其他相关面试题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他相关面试题"}},[t._v("#")]),t._v(" 其他相关面试题")]),t._v(" "),r("h2",{attrs:{id:"什么是跨域-什么样的url称之为同源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域-什么样的url称之为同源"}},[t._v("#")]),t._v(" 什么是跨域？什么样的URL称之为同源？")]),t._v(" "),r("p",[t._v("因为浏览器有一个重要的安全策略叫做同源策略，当浏览器发现静态资源和API接口请求不是来自同一个地方时，因为同源策略就会产生了跨域。"),r("br"),t._v("\nURL中只有，协议，主机地址，端口，三者都相同的情况下，才会称之为同源。")]),t._v(" "),r("h2",{attrs:{id:"常见的解决跨域的方案"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见的解决跨域的方案"}},[t._v("#")]),t._v(" 常见的解决跨域的方案")]),t._v(" "),r("ol",[r("li",[t._v("将静态资源和API服务器部署在同一个服务器中")]),t._v(" "),r("li",[t._v("开启CORS，http头部信息添加Access-Control-Allow-Origin")]),t._v(" "),r("li",[t._v("node代理服务器(webpack中devServer的proxy配置)")]),t._v(" "),r("li",[t._v("Nginx反向代理")])])])}),[],!1,null,null,null);r.default=e.exports}}]);